services:
  hasura-postgres:
    image: postgres:latest
    platform: linux/x86_64
    restart: unless-stopped
    container_name: hasura-postgres
    ports:
      - "5433:5432"
    volumes:
      - hasura-postgres:/var/lib/postgresql
      - hasura-postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: 'Raven123qweasd*+'
      POSTGRES_USER: 'hasura'
      POSTGRES_DB: 'hasura'
    networks:
      -  hasura-network
  hasura-graphql-engine:
    image: hasura/graphql-engine:v2.38.0
    platform: linux/x86_64
    restart: unless-stopped
    container_name: hasura-graphql-engine
    ports:
      - "8084:8080"
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://hasura:Raven123qweasd*+@hasura-postgres:5432/hasura
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://hasura:Raven123qweasd*+@hasura-postgres:5432/hasura
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      # HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      ## uncomment next line to set an admin secret
      HASURA_GRAPHQL_ADMIN_SECRET: 'Raven123qweasd*+'
      HASURA_GRAPHQL_METADATA_DEFAULTS: '{"backend_configs":{"dataconnector":{"athena":{"uri":"http://hasura-data-connector-agentt:8085/api/v1/athena"},"mariadb":{"uri":"http://hasura-data-connector-agentt:8085/api/v1/mariadb"},"mysql8":{"uri":"http://hasura-data-connector-agentt:8085/api/v1/mysql"},"oracle":{"uri":"http://hasura-data-connector-agentt:8085/api/v1/oracle"},"snowflake":{"uri":"http://hasura-data-connector-agentt:8085/api/v1/snowflake"}}}}'
    depends_on:
      - hasura-data-connector-agent
    networks:
      -  hasura-network
  hasura-data-connector-agent:
    image: hasura/graphql-data-connector:v2.38.0
    platform: linux/x86_64
    restart: unless-stopped
    container_name: hasura-data-connector-agent
    ports:
      - 8085:8081
    environment:
      QUARKUS_LOG_LEVEL: ERROR # FATAL, ERROR, WARN, INFO, DEBUG, TRACE
      ## https://quarkus.io/guides/opentelemetry#configuration-reference
      QUARKUS_OPENTELEMETRY_ENABLED: "false"
      ## QUARKUS_OPENTELEMETRY_TRACER_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/api/v1/athena/health"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s
    networks:
      -  hasura-network

volumes:
  hasura-postgres:
    name: hasura-postgres
  hasura-postgres_data:
    name: hasura-postgres_data
    
networks:
  hasura-network:
    name: hasura-network
    driver: bridge